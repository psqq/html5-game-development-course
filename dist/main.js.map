{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/canvas.js","webpack:///./src/images.js","webpack:///./src/index.js","webpack:///./src/texturepacker-parser.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;;;;;;;ACjFO;AACA;;AAEA;AACP;AACA;AACA;;AAEO;AACP;AACA;AACA;;;;;;;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;;AAEA;;AAEA;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yBAAyB;AAC5C;AACA;AACA;;;;;;;;;;;;;ACvDA;AAAA;AAAA;AAAA;AAAyD;AAKvC;AAGA;;AAElB;AACA;AACA;AACA;AACA,kCAAkC,6DAAmB;AACrD;;AAEA;AACA;AACA;AACA,8BAA8B,sDAAc;AAC5C;AACA;AACA;;AAEA;AACA,IAAI,+CAAG,iBAAiB,8CAAG,QAAQ,8CAAG;AACtC,IAAI,+CAAG,WAAW,sDAAc;AAChC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI,+CAAG;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,0EAA0B;AAC9B,UAAU,6DAAa;;AAEvB,wCAAwC,6DAAmB;AAC3D;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;AC7EA;AAAA;AAAA;AAAkC;;AAEnB;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,8CAAM;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","\r\nexport const canvas = document.querySelector('canvas');\r\nexport const context = canvas.getContext('2d');\r\n\r\nexport function setFullscreenSizeForCanvas() {\r\n    canvas.width = window.innerWidth;\r\n    canvas.height = window.innerHeight;\r\n}\r\n\r\nexport function makeAlwaysCanvasFullscreen() {\r\n    setFullscreenSizeForCanvas();\r\n    window.addEventListener('resize', setFullscreenSizeForCanvas);\r\n}\r\n","\nvar robowalkWhere = './assets/images/robowalk/';\nvar robowalkAssets = [\n    'robowalk00.png', 'robowalk01.png', 'robowalk02.png',\n    'robowalk03.png', 'robowalk04.png', 'robowalk05.png',\n    'robowalk06.png', 'robowalk07.png', 'robowalk08.png',\n    'robowalk09.png', 'robowalk10.png', 'robowalk11.png',\n    'robowalk12.png', 'robowalk13.png', 'robowalk14.png',\n    'robowalk15.png', 'robowalk16.png', 'robowalk17.png',\n    'robowalk18.png',\n];\n\nvar imagesWhere = './assets/images/';\nvar imagesAssets = [\n    \"robowalk/robowalk00.png\", \"robowalk/robowalk01.png\", \"robowalk/robowalk02.png\",\n    \"robowalk/robowalk03.png\", \"robowalk/robowalk04.png\", \"robowalk/robowalk05.png\",\n    \"robowalk/robowalk06.png\", \"robowalk/robowalk07.png\", \"robowalk/robowalk08.png\",\n    \"robowalk/robowalk09.png\", \"robowalk/robowalk10.png\", \"robowalk/robowalk11.png\",\n    \"robowalk/robowalk12.png\", \"robowalk/robowalk13.png\", \"robowalk/robowalk14.png\",\n    \"robowalk/robowalk15.png\", \"robowalk/robowalk16.png\", \"robowalk/robowalk17.png\",\n    \"robowalk/robowalk18.png\",\n    'grits_effects.png',\n    'grits_master.png',\n    'ralphyrobot.png',\n];\n\nexport var robowalkImages = [];\n\nexport var images = {};\n\nexport function loadImage(filename) {\n    return new Promise((resolve, reject) => {\n        let img = new Image();\n        img.onload = () => resolve(img);\n        img.onerror = err => reject(err);\n        img.src = filename;\n    });\n}\n\nexport async function loadAllImages() {\n    // Load robowalk images\n    var promises = [];\n    for (var filename of robowalkAssets) {\n        promises.push(loadImage(robowalkWhere + filename));\n    }\n    robowalkImages = await Promise.all(promises);\n    // Load other images\n    promises = [];\n    for (var filename of imagesAssets) {\n        promises.push(loadImage(imagesWhere + filename));\n    }\n    var imagesArr = await Promise.all(promises);\n    for (var i = 0; i < imagesAssets.length; i++) {\n        images[imagesAssets[i]] = imagesArr[i];\n    }\n}\n","import TexturepackerParser from './texturepacker-parser';\r\nimport {\r\n    canvas as can,\r\n    context as ctx,\r\n    makeAlwaysCanvasFullscreen\r\n} from './canvas';\r\nimport {\r\n    robowalkImages, images, loadAllImages\r\n} from './images';\r\n\r\nvar frameRate = 1000 / 30;\r\nvar frameTime = 0;\r\nvar frame = 0;\r\nvar timestamp = 0, timeOfLastUpdate = 0, dt = 0;\r\nvar gritsEffectsTexturePack = new TexturepackerParser();\r\nvar spriteSheets = {};\r\n\r\nfunction update() {\r\n    frameTime += dt;\r\n    if (frameTime > frameRate) {\r\n        frame = (frame + 1) % robowalkImages.length;\r\n        frameTime = 0;\r\n    }\r\n}\r\n\r\nfunction draw() {\r\n    ctx.clearRect(0, 0, can.width, can.height);\r\n    ctx.drawImage(robowalkImages[frame], 50, 50);\r\n    drawSprite('walk_down_0000.png', 200, 50);\r\n}\r\n\r\nfunction drawSprite(spriteName, posX, posY) {\r\n    for (var sheetName in spriteSheets) {\r\n        var sheet = spriteSheets[sheetName];\r\n        var sprite = sheet.getStats(spriteName);\r\n        if (sprite == null) continue;\r\n        __drawSpriteInternal(sprite, sheet, posX, posY);\r\n    }\r\n}\r\n\r\nfunction __drawSpriteInternal(spt, sheet, posX, posY) {\r\n    if (spt == null || sheet == null) return;\r\n    var hlf = {\r\n        x: spt.cx, y: spt.cy\r\n    };\r\n    ctx.drawImage(\r\n        sheet.img,\r\n        spt.x, spt.y, spt.w, spt.h,\r\n        posX + hlf.x, posY + hlf.y, spt.w, spt.h\r\n    );\r\n}\r\n\r\nasync function main() {\r\n    makeAlwaysCanvasFullscreen();\r\n    await loadAllImages();\r\n\r\n    spriteSheets['grits_effects'] = new TexturepackerParser('./assets/json/grits_effects.json');\r\n    await spriteSheets['grits_effects'].loadAndParse();\r\n\r\n    console.log('./assets/json/grits_effects.json parsed:');\r\n    console.log(spriteSheets['grits_effects']);\r\n    console.log(spriteSheets['grits_effects'].sprites);\r\n    console.log(spriteSheets['grits_effects'].sprites[123]);\r\n\r\n    // mainloop\r\n    function go() {\r\n        timestamp = performance.now();\r\n        dt = timestamp - timeOfLastUpdate;\r\n        timeOfLastUpdate = timestamp;\r\n        update();\r\n        draw();\r\n        requestAnimationFrame(go);\r\n    }\r\n    timeOfLastUpdate = performance.now();\r\n    requestAnimationFrame(go);\r\n}\r\n\r\nmain();\r\n","import { images } from './images';\r\n\r\nexport default class TexturepackerParser {\r\n    constructor(filename) {\r\n        this.filename = filename;\r\n        this.sprites = [];\r\n        this.atlasJSON = null;\r\n        this.img = null;\r\n    }\r\n    getStats(name) {\r\n        for(var sprite of this.sprites) {\r\n            if (sprite.id == name) {\r\n                return sprite;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    async loadAndParse(filename) {\r\n        if (filename) {\r\n            this.filename = filename;\r\n        }\r\n        var res = await fetch(this.filename);\r\n        this.atlasJSON = await res.json();\r\n        this.parseAtlasDefinition();\r\n    }\r\n    defSprite(name, x, y, w, h, cx, cy) {\r\n        var spt = {\r\n            id: name,\r\n            x, y, w, h,\r\n            cx: cx == null ? 0 : cx,\r\n            cy: cy == null ? 0 : cy\r\n        };\r\n        this.sprites.push(spt);\r\n    }\r\n    parseAtlasDefinition() {\r\n        this.img = images[this.atlasJSON.meta.image];\r\n        for (var name in this.atlasJSON.frames) {\r\n            var sprite = this.atlasJSON.frames[name];\r\n            var cx = -sprite.frame.w / 2;\r\n            var cy = -sprite.frame.h / 2;\r\n            this.defSprite(\r\n                name,\r\n                sprite.frame.x, sprite.frame.y,\r\n                sprite.frame.w, sprite.frame.h,\r\n                cx, cy\r\n            );\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""}